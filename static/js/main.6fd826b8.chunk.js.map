{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Business/Business.js","components/BusinessList/BusinessList.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOptions","sortByOption","this","setState","Object","keys","map","sortByOptionValue","key","className","getSortByClass","onClick","handleSortByChange","e","target","value","searchYelp","preventDefault","renderSortByOptions","placeholder","onChange","href","React","Component","Business","src","business","imageSrc","alt","name","address","city","zipCode","category","toUpperCase","rating","reviewCount","BusinessList","businesses","id","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6fd826b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            term: '',\r\n            location: '', \r\n            sortBy: 'best_match'\r\n        };\r\n\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n\r\n        this.sortByOptions = {\r\n            'Best Match': 'best_match',\r\n            'Highest Rated': 'rating',\r\n            'Most Reviewed': 'review_count'\r\n        }\r\n    }\r\n\r\n    getSortByClass(sortByOption) {\r\n        if (this.state.sortBy === sortByOption) {\r\n            return 'active';\r\n        } \r\n        return '';\r\n    }\r\n\r\n    handleSortByChange(sortByOption) {\r\n        this.setState({\r\n            sortBy: sortByOption \r\n        });\r\n    }\r\n\r\n    renderSortByOptions() {\r\n        return Object.keys(this.sortByOptions).map(sortByOption => {\r\n            let sortByOptionValue = this.sortByOptions[sortByOption];\r\n            return <li key={sortByOptionValue} className= {this.getSortByClass(sortByOptionValue)} \r\n            onClick= {this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption}</li>;\r\n        });\r\n    }\r\n\r\n    handleTermChange(e) {\r\n        this.setState({\r\n            term: e.target.value\r\n        });\r\n    }\r\n\r\n    handleLocationChange(e) {\r\n        this.setState({\r\n            location: e.target.value\r\n        });\r\n    }\r\n\r\n    handleSearch(e) {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        e.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n            <div className=\"SearchBar-sort-options\">\r\n              <ul>\r\n                {this.renderSortByOptions()}\r\n              </ul>\r\n            </div>\r\n            <div className=\"SearchBar-fields\">\r\n              <input placeholder=\"Search Businesses\" onChange= {this.handleTermChange}/>\r\n              <input placeholder=\"Where?\" onChange= {this.handleLocationChange}/>\r\n            </div>\r\n            <div className=\"SearchBar-submit\">\r\n              <a href=\"www.#.com\" onClick= {this.handleSearch}>Let's Go</a>\r\n            </div>\r\n          </div> \r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Business.css';\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <img src={this.props.business.imageSrc} alt=''/>\r\n                </div>\r\n                <h2>{this.props.business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                        <p>{this.props.business.address}</p>\r\n                        <p>{this.props.business.city}</p>\r\n                        <p>{this.props.business.state} {this.props.business.zipCode}</p>\r\n                    </div>\r\n                    <div className=\"Business-reviews\">\r\n                        <h3>{this.props.business.category.toUpperCase()}</h3>\r\n                        <h3 className=\"rating\">{this.props.business.rating}</h3>\r\n                        <p>{this.props.business.reviewCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"BusinessList\">\r\n        {\r\n          this.props.businesses.map(business => {\r\n            return <Business business={business} key={business.id} />\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BusinessList;","const apiKey = 'kBBbIGqx_I_t7uZpcol5O2o07Iq2fe_l9VKHKDMufJAYeN5q_cw5dnQAUx17ISYEWJJs-7Y-DiaVkxMaRgitMPAYkK3qXDFLuwqCny162xqm0uGzP03nVixe9fAsX3Yx'; \r\n\r\nconst Yelp = {\r\n  search(term, location, sortBy) {\r\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${apiKey}`\r\n      }\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if (jsonResponse.businesses) {\r\n        return jsonResponse.businesses.map(business => ({\r\n          id: business.id,\r\n          imageSrc: business.image_url,\r\n          name: business.name,\r\n          address: business.location.address1,\r\n          city: business.location.city,\r\n          state: business.location.state,\r\n          zipCode: business.location.zip_code,\r\n          category: business.categories[0].title,\r\n          rating: business.rating,\r\n          reviewCount: business.review_count\r\n        }));\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport default Yelp;\r\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport BusinessList from '../BusinessList/BusinessList';\nimport Yelp from '../../util/Yelp';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      businesses: []\n    };\n\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then(businesses => {\n     this.setState({\n        businesses: businesses\n      })\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp= {this.searchYelp}/>\n        <BusinessList businesses={this.state.businesses}/> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}